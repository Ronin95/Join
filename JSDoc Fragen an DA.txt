Allg. Wie kommentiert/dokumentiert man (die richtige Syntax?) mittels JSDoc die folgenden Fälle:

1. Ein Event als Parameter in eine üblich JS Funktion, s. Bsp

- Reicht dort einfach ein allgemeiner @param tag {Event} oder soll ein konkreter eventtyp tag wie z.B. {DragEvent}?
- Es ist quasi eine übliche JSDoc Dokumentation einer Funktion mit einem Parameter mittels @param, 
nur das hier z.B kein String oder Number steht, sondern ein event?

2. Ein AddEventListener
a) vom Object document ('root')
b) vom Object window
c) vom einem konkreten HTML-Element (mit einer konkreten id)

a)
- Es gibt kaum bzw. komplizierte / nicht einfache Beispiele im Internet dazu (2 volle Tage gegoogelt :)!)
    - Muss davor das Event an sich
        - entweder innerhalb des gleichen JSDoc Kommentars bzw. in einem separaten dokumentiert werden,
        damit man 'später' mit einem entsprechendem @tag, hier @listens darauf verweisen kann?
         - meine TryErrorFeststellung: wenn man das event NICHT DAVOR ZUSÄTZLICH definiert, 
         wird der Listener im ExportDokuFile gar nicht erscheinen
         - ist das immer davor erforderlich?
         - wenn JA, wie soll man es machen? --> kurz knapp, am besten mit einem Kommentar.

         - wie soll der konkrete Typ des Events vom document/window/HTML-Elementes - addEventListeners
         kommentiert werden, da er an sich in seiner Syntax ein String in den Funktionsklammerns ist (ohne Prefix 'on') wie z.B.
         'resize', 'click' etc. 
            - 
        
         - muss auch der Owner des 'addEventListeners' quasi das dokument-Objekt, window-Objekt bzw das konkrete HTML-Element 
         mit einem JSDOC @Object MIT (innerhalb des Kommentars) / DAVOR kommentiert werden?
         - wenn ja soll man auch die 'hierarschiche Verwandschaft/Zugehörigkeit'
           - der Funktion AddEvenetListeners
           - des Events 
         zum dem Owners innerhalb des  @events {typ} mitkommentiert werden?
         - wenn JA, mit welchem Zeichen? # /  ~  / .  ?
            document#addEventListener
            document~addEventListener
            document.addEventListener

            window#addEventListener
            window~addEventListener
            window.addEventListener

            document.getElementById('beispielElementMitID')#addEvenetListener
            document.getElementById('beispielElementMitID')~addEvenetListener
            document.getElementById('beispielElementMitID').addEvenetListener
         - wenn JA wie soll man es machen --> kurz knapp, am besten mit einem Kommentar.


         - muss vor dem event noch ein @namespace wie z.B. event:DragEvent bei @listens @fires tag vorangestellt werden?

         - wie (mit welcher Syntax, welchem @tag) soll dann die Funktion kommetiert werden, welche dann
         von einem EventListener ausgelöst wird
          - mit einem tag @fuction oder eher @callback
          - ähnlich wie bei der vorherigen Frage zum Event: muss die jeweilige auszulösende Funktion davor
          mit JSDoc kommetiert werden? Innerhlab des gleichen Kommentars oder separat (und hier verlinkt werden?)


          - wie soll die Funktion mit JSDOC kommetiert werden, wenn die Funktion direkt innerhalb des addEvenetListener
          definiert wird? Wie sieht die Syntax, die @tags für diesen Fall aus?


2) Instanz von einem Objekt / Klasse / JS Model (ich kenn nocht nicht die richtige Begrifflichkeit)
   - mit Parametern
   - Initialwerten

3) Instanz von einem Objekt / Klasse / JS Model aber mit direkt eine Funktion hinterm dem Punkt
   - mit Parametern
   - Initialwerten

4) JS Kommentare innerhalb einer Funktion (nicht drüber)

5) Sollen alle globalen / bzw. lokalen Vairialen (nur innerhalb Funtionen) mit @tags
   - @type
   - @default (Wert)
   - @const
   kommentiert werden? Oder reichen bei Variablen eindeutige Namen der Variablen.

   - sollen festzugewiesene HTMLElemente als Viariablen mit JSDoc kommentiert werden?

6) Sollen JSONs (wenn das eine Mischung aus JSONS, Array, Strings, Funktionen etc. --> 2,3 stufig verschachtelt) 
in Script auch im JSDoc Standard mit tags wie @Objekt @property {type --> zu jeder JSON-Property} kommteriert werden?
Oder reicht hier eindeutiger Namen? --> Potenzial für sehr langes Kommentar.

7) Soll zwischen Description und dem ersten weiterem @tag wie z.B. @param eine leere Zeile bleiblen oder nicht?
Bei ca. 400 Zeilen Code und 20-30 Funktionen würde diese Abständen schon 20-30 Zeilen Code nehmen.
--> JSDoc Doku ist auf ihrer Webseite mit Beispieln auch nicht konsistent und macht bei vielen Beispielen
keinen Zeilenabstand.

8. Wie soll gramatikalisch die Description formuliert sein?
   - im Imperativ wie z.B. Creates a new objekt of .....
   - oder Simple Past - dritte Person (It = fuction) zB. Creates a new Objekt?
   - oder ein Nomen aus dem Verb? Creating, Removing, Calculating of ....

   bei gängigen Funktionsanwenungen habe ich auch eine Empfehlung gelesen zur Verwendung der Verben wie
   set, get, return, create, remove, add, save, show, hide, generate, calculate etc.
   Und dort wurde z.B. kein Simple Past mit einem S am ende des Verbes geschrieben.

   Was ist zu empfehlen?

9. Wie soll gramatikalisch die Descritpion für ein @param aussehen? Bei JSDoc Doku in Webbeispielen gibt
es auch keine klare Linie.
 - Soll es mit einem - und Großbuchstaben anfangen oder nur mit einem Leerzeichen getrennt werden?
 - Soll es immer mit einem Großbuchstaben und einem Punkt anfangen, obwohl es in einigen Beispielen
 in JSDoc Doku und im Web kein Satz ist.
 - Soll das immer mit This is ... anfangen oder kann darauf verzichtet werden. Sonst hat man bei 50, 100 Paramtern in der Doku
  immer den gleichen sich wiederholenden Satz in der Tabelle an der Stelle Description des Parameters.
  Oder reicht vollkommen aus z.B. The number of the ....
  Was ist zu empfehlen?

10. Wie soll die Syntax bei einem @returns aussehen? Bei JSDoc Doku wir da kein - gesetzt, nur im Gegensatz zu einem @param
direkt die Description mit Gro0buchstaben und einem Punkt am Ende definiert.
- soll hier auch der @type tag verwendet werden (Empfehlung?)

11. Wie würde man so entwas kommentieren?
  event.preventDefault();

12. Wie würde man so entwas kommentieren? (Contante, Instanz, Klasse, Objektfunktion mit Parameter als HTML Objekt)  
const toast = new bootstrap.Toast(successToast);

13. Wie würde man so entwas kommentieren? (Instanziertes Objekt mit seiner eingen Funktion)
    toast.show();

14. Wie würde man so entwas kommentieren? (Ein HTML-Element gespeichert in einer lokalen Variable mit einer Funktion von einem Objekt)
   formAddTask.reset();

15. Wie lange soll maximal einem JSDoc eine Zeile sein, inklsuive der tag wie @param {type} [deafult value] etc.?

16. Wie soll so etwas in JSDoc dokumentiert werden?
      $(document).ready(function () {
         $('.input-daterange').datepicker({
            format: 'dd/mm/yyyy',
            autoclose: true,
            calendarWeeks: true,
            clearBtn: true,
            disableTouchKeyboard: true,
         });
      });

17. Wie soll man so etwas direkt ausgeführt in inder JS-Datei (ohne dafür eine Funktion zu definieren) mittesls JSDoc kommentieren?
      const toastTrigger1 = document.getElementById("signInBtn");
      const toastLiveExample1 = document.getElementById("signInToast");
      if (toastTrigger1) {
      toastTrigger1.addEventListener("click", () => {
         verifyNull();
         const toast = new bootstrap.Toast(toastLiveExample1);
         toast.show();
      });
      }

18. Wie soll Multi-Zeilen-Block von einem @param formatiert werden? Soll die zweite, dritte etc. Zeile direkt unter @param weiter laufen? Oder soll erst zu
einem Punkt (Ende vom @param, @tape, Parameter-Name) tabuliert werden?